export declare class Facets extends Tracer {
times: Times;
doTrace: boolean;
titleTargeters: any;
targeterTree: STargeter;
notifiable: Notifiable;
onRetargeted(): void;
traceOutput(msg: string): void;
newTextualTarget(title: string, c: TextualCoupler): STarget;
newTogglingTarget(title: string, c: TogglingCoupler): STarget;
newNumericTarget(title: string, c: NumericCoupler): STarget;
newTriggerTarget(title: string, c: TargetCoupler): STarget;
newTargetGroup(title: string, ...members: STarget[]): STarget;
updatedTarget(target: STarget, c: TargetCoupler): void;
newIndexingTarget(title: string, c: IndexingCoupler): STarget;
getIndexingState(title: string): IndexingState;
newIndexingFrame(p: IndexingFramePolicy): STarget;
buildTargeterTree(targetTree: STarget): void;
updateTargeterTree(): void;
updateTitleTargeters(t: STargeter): void;
titleTarget(title: string): STarget;
attachFacet(title: string, facetUpdated: any): void;
updateTargetState(title: string, update: any): void;
notifyTargetUpdated(title: string): void;
updateTargetWithNotify(title: string, update: any): void;
getTargetState(title: string): any;
setTargetLive(title: string, live: boolean): void;
isTargetLive(title: string): boolean;
class Times {
doTime: boolean;
resetWait: number;
then: number;
start: number;
restarted: boolean;
debug: boolean;
setResetWait(wait: number): void;
elapsed(): number;
traceElapsed(msg: string): void;
newMillis(): number;
interface TargetCoupler {
targetStateUpdated?: (p1: any, p2: string) => void;
interface IndexingState {
uiSelectables: string[];
indexed: any;
interface IndexingFramePolicy {
frameTitle: string;
indexingTitle: string;
getIndexables: () => any[];
getUiSelectables: () => string[];
newIndexingTargets: () => STarget[];
newIndexedTitle: (p1: any) => string;
newIndexedTargets: (p1: any, p2: string) => STarget[];
class LocalFrameTarget extends SFrameTarget {
newEditTargets: (p1: any, p2: string) => STarget[];
lazyElements(): STarget[];
interface TextualCoupler extends TargetCoupler {
passText?: string;
getText?: (p1: string) => string;
isValidText?: (p1: string, p2: string) => boolean;
interface TogglingCoupler extends TargetCoupler {
passSet: boolean;
interface NumericCoupler extends TargetCoupler {
passValue: number;
min: number;
max: number;
interface IndexingCoupler extends TargetCoupler {
passIndex: number;
getIndexables: (p1: string) => any[];
getUiSelectables: (p1: string) => string[];
notify(notice: any): void;
title(): string;
textSet(target: STextual): void;
getText(t: STextual): string;
isValidText(t: STextual, text: string): boolean;
stateSet(target: SToggling): void;
valueSet(n: SNumeric): void;
policy(n: SNumeric): NumberPolicy;
fired(t: STrigger): void;
getIndexables(i: SIndexing): any[];
indexSet(target: SIndexing): void;
getFacetSelectables(i: SIndexing): string[];
thenIndexables: any[];
thenSelectables: any[];
getIndexables(i: SIndexing): any[];
getFacetSelectables(i: SIndexing): string[];
lazyElements(): STarget[];
newIndexedFrame(indexed: any): SFrameTarget;
id: number;
retarget(target: STarget): void;
toString(): string;
