import { Notifiable } from '../core/Notifiable';
import { SFacet } from '../core/SFacet';
import { SFrameTarget } from '../core/SFrameTarget';
import { SIndexing } from '../core/SIndexing';
import { SNumeric } from '../core/SNumeric';
import { STarget } from '../core/STarget';
import { STargeter } from '../core/STargeter';
import { STextual } from '../core/STextual';
import { SToggling } from '../core/SToggling';
import { STrigger } from '../core/STrigger';
import { IndexingFrame } from '../core/select/IndexingFrame';
import { NumberPolicy } from '../util/NumberPolicy';
import { Tracer } from '../util/Tracer';
export declare class Facets extends Tracer {
    times: Facets.Times;
    doTrace: boolean;
    __onRetargeted: any;
    titleTargeters: any;
    targeterTree: STargeter;
    notifiable: Notifiable;
    onRetargeted(): void;
    constructor(top: string, trace: boolean);
    /**
     *
     * @param {string} msg
     */
    traceOutput(msg: string): void;
    newTextualTarget(title: string, c: Facets.TextualCoupler): STarget;
    newTogglingTarget(title: string, c: Facets.TogglingCoupler): STarget;
    newNumericTarget(title: string, c: Facets.NumericCoupler): STarget;
    newTriggerTarget(title: string, c: Facets.TargetCoupler): STarget;
    newTargetGroup(title: string, ...members: STarget[]): STarget;
    updatedTarget(target: STarget, c: Facets.TargetCoupler): void;
    newIndexingTarget(title: string, c: Facets.IndexingCoupler): STarget;
    getIndexingState(title: string): Facets.IndexingState;
    newIndexingFrame(p: Facets.IndexingFramePolicy): STarget;
    buildTargeterTree(targetTree: STarget): void;
    updateTargeterTree(): void;
    updateTitleTargeters(t: STargeter): void;
    titleTarget(title: string): STarget;
    attachFacet(title: string, facetUpdated: any): void;
    updateTargetState(title: string, update: any): void;
    notifyTargetUpdated(title: string): void;
    updateTargetWithNotify(title: string, update: any): void;
    getTargetState(title: string): any;
    setTargetLive(title: string, live: boolean): void;
    isTargetLive(title: string): boolean;
}
export declare namespace Facets {
    class Times {
        __parent: any;
        doTime: boolean;
        resetWait: number;
        then: number;
        start: number;
        restarted: boolean;
        debug: boolean;
        setResetWait(wait: number): void;
        /**
         * The time since the last auto-reset.
         * <p>Interval for reset set by {@link #resetWait}.
         * @return {number}
         */
        elapsed(): number;
        /**
         * Print {@link #elapsed()} followed by the message.
         * @param {string} msg
         */
        traceElapsed(msg: string): void;
        newMillis(): number;
        constructor(__parent: any);
    }
    interface TargetCoupler {
        targetStateUpdated?: (p1: any, p2: string) => void;
    }
    interface IndexingState {
        uiSelectables: string[];
        indexed: any;
    }
    interface IndexingFramePolicy {
        frameTitle: string;
        indexingTitle: string;
        getIndexables: () => any[];
        getUiSelectables: () => string[];
        newIndexingTargets: () => STarget[];
        newIndexedTitle: (p1: any) => string;
        newIndexedTargets: (p1: any, p2: string) => STarget[];
    }
    class LocalFrameTarget extends SFrameTarget {
        newEditTargets: (p1: any, p2: string) => STarget[];
        constructor(title: string, toFrame: any, newEditTargets: (p1: any, p2: string) => STarget[]);
        /**
         *
         * @return {Array}
         */
        lazyElements(): STarget[];
    }
    interface TextualCoupler extends Facets.TargetCoupler {
        passText?: string;
        getText?: (p1: string) => string;
        isValidText?: (p1: string, p2: string) => boolean;
    }
    interface TogglingCoupler extends Facets.TargetCoupler {
        passSet: boolean;
    }
    interface NumericCoupler extends Facets.TargetCoupler {
        passValue: number;
        min: number;
        max: number;
    }
    interface IndexingCoupler extends Facets.TargetCoupler {
        passIndex: number;
        getIndexables: (p1: string) => any[];
        getUiSelectables: (p1: string) => string[];
    }
}
